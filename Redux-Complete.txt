babel - transpiles es6 to es5
webpack -minified file that works in the browser
eslint- check lint
mocha: simple ,flexible, fun
redux: 
react/router

plugn : babel-preset-react-hmre :
warning:
experimental
doesn't reload functional components
doesn't reload container functions like mapStateToProps

// link https://github.com/ktpm489/javascript-development-environment
// https://codeaholicguy.com/2016/06/28/hoc-reactredux-qua-vi-du-thuc-te-khoi-tao-project/
-----------React compoents=========
es5 Create class
es6 class
es5 stateless function
es6 stateless function

----Example class component-------------------
es5 class component-------------------
var Helloworld = React.createClass({
	render: function(){
		return (
			<h1>Hello world</h1>
		)
	}
})
---------React in es6----------
No auto bind
<div onClick={this.handleClick}> </div>
// Requires explicit bind with es6
<div onClick={this.handleClick.bind(this)}</div>
+ PropTypes declared separately
+ Default props declared separately
====ES5 stateless functional component-------------------
var Helloworld= function(props) {
	return (
		<h1>Helloworld </h1>
	)
}
+ Stateless Components===

Don't need this
ex : onClick={ this.sayHi.bind(this)}
onClick={sayHi}



Class  Component                       |    Stateless Components
State										Everywhere
Refs
Lifecycle methods
Child functions (for performance)
--------Other ways to create components-----------
Object.create
Mixins
Parasitic Component
Stamplt
https://viblo.asia/p/react-presentational-and-container-components-07LKXY08ZV4
// https://stackoverflow.com/questions/41635800/redux-presentational-components-vs-container-componet
https://www.fullstackreact.com/p/using-presentational-and-container-components-with-redux/
Container Components
Aware of redux
subscribe redux state
dispatch to redux actions
generated by react-redux
focus on how things works

Presentational Components
Unaware of redux
Read data from props
Invoke callback on props
Write by developer
Focus hon how things look

Benifits
Reusability
Separation of concerns

example :
class CommentListContainer extends React.Component {
 state = { comments : [] };
 componentDidMount() {
	fetchSomeComment(comments => this.setState({ comments : comments});
 }
 render(){
	return <CommentList comments={this.state.comments}/>
 }
}

const CommentList = (props) => {
	<ul>
		{props.comments.map(c=> {
			<li>{c.body} -{c.author}</li>
		})
		
		}
	
	</ul>

}

///https://github.com/ktpm489/react-flux-building-applications
// https://github.com/ktpm489/react-redux-app (main app)

Tao app mkdir tenapp
cd tenapp
npm init -y lệnh này giúp bạn khởi tạo file package.json nơi bạn sẽ khai báo các gói dependency cũng như là các script để chạy trong project.

Webpack là công cụ giúp đóng gói toàn bộ source cũng như giúp bạn build project một cách dễ dàng. Hơn thế nữa chúng ta sẽ sử dụng webpack-dev-server để phục vụ việc phát triển app ở môi trường local được thuận tiện hơn. Chi tiết về webpack sẽ không tiện nói hết trong bài này, có thể mình sẽ viết những bài riêng về webpack để chia sẻ với các bạn nhiều hơn.

Trong terminal các bạn nhập vào lệnh như sau.

npm install --save-dev webpack webpack-dev-server html-webpack-plugin
Lệnh này sẽ giúp chúng ta cài đặt các gói webpack, webpack-dev-server và html-webpack-plugin vào project, lệnh --save-dev chỉ định sẽ lưu dependency của các gói này vào file package.json để chúng ta có thể mang source code đi nhiều các máy khác nhau mà không cần mang theo các gói dependency.

Sau khi cài đặt xong, chúng ta sẽ thêm start script để chạy webpack-dev-server vào trong file package.json như sau.

...
"scripts": {
    "start": "webpack-dev-server --progress --colors --hot --config ./webpack.config.js",
    ...
},
...
view rawpackage.json hosted with ❤ by GitHub
Như các bạn có thể thấy, chúng ta đã khai báo webpack-dev-server sẽ sử dụng một số config từ file webpack.config.js

Trong thư mục project, các bạn hãy tạo file webpack.config.js và nhập vào như sau.

const webpack = require('webpack')
const HtmlWebpackPlugin = require('html-webpack-plugin')

module.exports = {
  entry: './src/index.js',

  output: {
    path: __dirname + '/build',
    publicPath: '/',
    filename: 'app.js'
  },

  devServer: {
    contentBase: './build'
  },

  plugins: [
    new HtmlWebpackPlugin({
      template: 'src/index.html',
      inject: true
    })
  ]
}
view rawwebpack.config.js hosted with ❤ by GitHub
Dễ dàng thấy, file config này nói rằng, chúng ta muốn sử dụng src/index.js như là entry point để đóng gói tất các những file được import vào project. File được đóng gói sẽ tên là app.js và được đặt trong thư mục build. Thư mục này sẽ được sử dụng cho app của chúng ta. Ngoài ra chúng ta sử dụng thêm plugin HtmlWebpackPlugin với thuộc tính inject: true để append file script app.js ta đã build ở trên vào file index.html.

Cái mà chúng ta đang thiếu bây giờ là hai file src/index.html và src/index.js, cùng tạo hai file đó nhé.
// https://github.com/reactjs/react-redux/blob/master/docs/api.md

hunk là gì?
Thunk là 1 function mà nó khác biệt những function bình thường là thay vì return trực tiếp kết quả thì thunk lại return ra 1 function và trong function đó làm tiếp một vài nhiệm vụ nữa sau đó mới return ra kết quả cuối cùng.


https://insights.innovatube.com/redux-th%E1%BA%ADt-l%C3%A0-%C4%91%C6%A1n-gi%E1%BA%A3n-ph%E1%BA%A7n-cu%E1%BB%91i-4155b1cfed03
https://medium.com/@stowball/a-dummys-guide-to-redux-and-thunk-in-react-d8904a7005d3
https://github.com/reactjs/react-redux/issues/249
https://stackoverflow.com/questions/42077868/reactjs-redux-how-to-structure-action-creators-down-to-each-component

https://viblo.asia/p/unit-test-cho-nodejs-restful-api-voi-mocha-va-chai-bWrZnLAv5xw
